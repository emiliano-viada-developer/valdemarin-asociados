<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * BuildingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 * @author Emiliano Viada
 */
class BuildingRepository extends EntityRepository
{
	/**
	 * getFeatured() method
	 */
	public function getFeatured()
	{
		$q = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('b')
            ->from('AppBundle:Building', 'b')
            ->where('b.featured = :featured')
            ->setParameter('featured', 1)
            ->getQuery();

        return $q->getResult();
	}

	/**
	 * search() method
	 * @param array $fields
	 */
	public function search($fields)
	{
		$q = $this->getEntityManager()
			->createQueryBuilder()
			->select('b')
            ->from('AppBundle:Building', 'b')
            ->where('1 = 1');

        // Filter by property type?
        if (isset($fields['propertyType']) && $fields['propertyType'] != '') {
        	$q->andWhere('b.propertyType = :propertyType')
        		->setParameter('propertyType', $fields['propertyType']);
        }

        // Filter by location?
        if (isset($fields['location']) && $fields['location'] != '') {
        	$q->andWhere('b.location = :location')
        		->setParameter('location', $fields['location']);
        }

        // Filter by price?
        if (isset($fields['price_min']) && $fields['price_min'] != ''
        	&& isset($fields['price_max']) && $fields['price_max'] != '') {
	        	$priceMin = (float) str_replace('$', '', $fields['price_min']);
	        	$priceMax = (float) str_replace('$', '', $fields['price_max']);
	        	$q->andWhere('b.price >= :priceMin AND b.price <= :priceMax')
	        		->setParameter('priceMin', $priceMin)
	        		->setParameter('priceMax', $priceMax);
        }

        // Filter by operation type?
        if (isset($fields['operationType']) && $fields['operationType'] != '') {
        	$q->andWhere('b.operationType = :operationType')
        		->setParameter('operationType', $fields['operationType']);
        }

        // Filter by surface?
        if (isset($fields['surface']) && $fields['surface'] != '') {
        	if ($fields['surface'] == 100) {
        		$q->andWhere('b.surfaceM2 <= :surface')
        			->setParameter('surface', $fields['surface']);
        	} elseif ($fields['surface'] == 1000) {
        		$q->andWhere('b.surfaceM2 >= :surfaceMin AND b.surfaceM2 <= :surfaceMax')
        			->setParameter('surfaceMin', 501)
        			->setParameter('surfaceMax', $fields['surface']);
        	} else {
        		$q->andWhere('b.surfaceM2 >= :surfaceMin AND b.surfaceM2 <= :surfaceMax')
        			->setParameter('surfaceMin', $fields['surface']-99)
        			->setParameter('surfaceMax', $fields['surface']);
        	}
        }

        return $q->getQuery()->getResult();
	}

    /**
     * findAll() method
     */
    public function findAll()
    {
        return $this->findBy(array(), array('createdAt' => 'DESC'));
    }
}
